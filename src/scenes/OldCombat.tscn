[gd_scene load_steps=21 format=2]

[ext_resource path="res://prefabs/WinScreen.tscn" type="PackedScene" id=1]
[ext_resource path="res://res/field_tileset.tres" type="TileSet" id=2]
[ext_resource path="res://img/actors/145.png" type="Texture" id=3]
[ext_resource path="res://img/actors/123.png" type="Texture" id=4]
[ext_resource path="res://img/actors/68.png" type="Texture" id=5]
[ext_resource path="res://img/actors/134.png" type="Texture" id=6]
[ext_resource path="res://img/tiles/image_part_028.png" type="Texture" id=7]
[ext_resource path="res://src/ecs/core/Entity.cs" type="Script" id=8]
[ext_resource path="res://img/tiles/image_part_026.png" type="Texture" id=9]
[ext_resource path="res://prefabs/LeftProfileCardPrefab.tscn" type="PackedScene" id=10]
[ext_resource path="res://prefabs/RightProfileCardPrefab.tscn" type="PackedScene" id=11]
[ext_resource path="res://prefabs/ActionMenuPrefab.tscn" type="PackedScene" id=12]
[ext_resource path="res://prefabs/TerrainInfoPrefab.tscn" type="PackedScene" id=13]

[sub_resource type="CSharpScript" id=1]
script/source = "using Godot;
using Ecs;
using System.Collections.Generic;
using System;

public class Combat : Manager
{
    private ProfileCardPrefab leftProfileCard;
    private ProfileCardPrefab rightProfileCard;
    private ActionMenuPrefab actionMenu;

    public override void _Ready()
    {
        leftProfileCard = GetNode(\"HUD/LeftProfile\") as ProfileCardPrefab;
        rightProfileCard = GetNode(\"HUD/RightProfile\") as ProfileCardPrefab;
        actionMenu = GetNode(\"HUD/LeftProfile/ActionMenu\") as ActionMenuPrefab;
        actionMenu.SetButtonCallback(skill => AddComponentToEntity(GetNewEntity(), new SelectActionEvent() { SelectedSkill = skill }));

        ApplyState(new CombatStartState());
        CreateSystems();
        var mapComp = BuildMap();
        BuildControlElements();
        BuildActors(mapComp);

        AddComponentToEntity(GetNewEntity(), new AdvanceClockEvent());
    }

    private void CreateSystems()
    {
        AddSystem(new ManualCameraControlSystem());
        AddSystem(new MouseToMapSystem());
        AddSystem(new PulseSystem());
        AddSystem(new ClampToMapSystem());
        AddSystem(new DepthSortSystem());
        AddSystem(new RenderTurnOrderCardsSystem());
        AddSystem(new RemoveDyingEntitiesSystem());
        AddSystem(new TweenCleanupSystem());
        AddSystem(new RenderStatusEffectsSystem());

        // Event Handling Systems
        AddSystem(new SelectActionEventSystem());
        AddSystem(new AdvanceClockEventSystem());
        AddSystem(new SetActionsDisplayStateEventSystem());
        AddSystem(new DeferredEventSystem());

        AddSystem<PlayerMovementState>(new TravelToLocationSystem());
        AddSystem<PlayerMovementState>(new RenderSelectedMovementSystem());

        AddSystem<PlayerTargetingState>(new SelectActionLocationSystem());
        AddSystem<PlayerTargetingState>(new RenderTargetIndicatorsSystem());
        AddSystem<PlayerTargetingState>(new RenderTargetProfileSystem());

        AddSystem<RoamMapState>(new SelectActorSystem());
    }

    private Map BuildMap()
    {
        var mapNode = FindNode(\"Map\");
        var tileToTerrain = new Dictionary<int, TerrainType>()
        {
            { 0, TerrainType.Dirt },
            { 1, TerrainType.Dirt },
            { 2, TerrainType.Dirt },
            { 3, TerrainType.Grass },
            { 4, TerrainType.Grass },
            { 5, TerrainType.Grass },
            { 6, TerrainType.Grass },
            { 7, TerrainType.Stone },
            { 8, TerrainType.Stone },
            { 9, TerrainType.Stone },
            { 10, TerrainType.Stone },
            { 11, TerrainType.Water },
            { 12, TerrainType.Water },
            { 13, TerrainType.DeepWater },
            { 14, TerrainType.Sand },
            { 15, TerrainType.Sand },
            { 16, TerrainType.Wood },
            { 17, TerrainType.Wood },
            { 18, TerrainType.Wood },
            { 19, TerrainType.Wood },
        };

        var tileEntities = new List<Entity>();
        var height = 0;
        foreach (var child in mapNode.GetChildren())
        {
            if (child is TileMap map)
            {
                var tileSet = map.TileSet;
                foreach (Vector2 tile in map.GetUsedCells())
                {
                    var tileId = map.GetCellv(tile);

                    var tileEnt = GetNewEntity();
                    AddComponentsToEntity(tileEnt, 
                        new TileLocation() { TilePosition = new Vector3(tile.x, tile.y, height), ZLayer = 0 }, 
                        new SpriteWrap(), 
                        new Terrain() { Type = tileToTerrain[tileId] });
                    tileEntities.Add(tileEnt);

                    tileEnt.GetComponent<SpriteWrap>().Sprite.Texture = map.TileSet.TileGetTexture(tileId);
                }

                height++;
            }
        }

        var mapEnt = GetNewEntity();
        var mapComp = new Map(tileEntities);
        AddComponentToEntity(mapEnt, mapComp);

        mapNode.QueueFree();

        return mapComp;
    }

    private void BuildControlElements()
    {
        var camera = FindNode(\"Camera\") as Entity;
        RegisterExistingEntity(camera);
        AddComponentToEntity(camera, new CameraWrap());

        var target = FindNode(\"Target\") as Entity;
        RegisterExistingEntity(target);
        AddComponentsToEntity(target,
            new Pulse() { squishAmountX = 0.05f, squishAmountY = 0.05f, squishSpeed = 5 },
            new SpriteWrap(), 
            new Reticle(), 
            new CameraRef() { Camera = camera.GetComponent<CameraWrap>().Camera }, 
            new TileLocation() { ZLayer = 2 });
    }

    private Vector3 TilePositionFromActor(Entity actor, Map map) =>
        map.IsoMap.PickUncovered(actor.Position)[0].GetComponent<TileLocation>().TilePosition;

    private void BuildActors(Map map)
    {
        var flyingMoveType = new Dictionary<TerrainType, float>
        {
            { TerrainType.Stone, 1 },
            { TerrainType.Wood, 1 },
            { TerrainType.Grass, 1 },
            { TerrainType.Dirt, 1 },
            { TerrainType.Water, 1 },
            { TerrainType.DeepWater, 1 },
            { TerrainType.Sand, 1 },
        };

        var amphibiousMoveType = new Dictionary<TerrainType, float>
        {
            { TerrainType.Water, 1 },
            { TerrainType.DeepWater, 1 },
        };
        var skillList = new List<Skill>()
        {
            new Skill() { Name = \"Tackle\", Speed = 5, MaxTP = 999, CurrentTP = 500, MinRange = 1, MaxRange = 1, Accuracy = 95, Effects = new Dictionary<string, int>() { { \"StrDamage\", 10 } } },
            new Skill() { Name = \"Throw Bomb\", Speed = 8, MaxTP = 10, CurrentTP = 10, AreaOfEffect = 1, MaxAoeHeightDelta = 1, MinRange = 2, MaxRange = 5, Accuracy = 60, Effects = new Dictionary<string, int>() { { \"MagDamage\", 30 } } },
            new Skill() { Name = \"Double Team\", Speed = 3, MaxTP = 8, CurrentTP = 8, MinRange = 0, MaxRange = 0, Accuracy = 9999, Effects = new Dictionary<string, int>() { { \"Haste\", 3 } } },
            //new Skill() { Name = \"Heal\", Speed = 6, MaxTP = 5, CurrentTP = 5, MinRange = 0, MaxRange = 2, Accuracy = 9999, Effects = new Dictionary<string, int>() { { \"Heal\", 20 } } },
        };

        foreach (var state in WorldState.PartyState)
        {
            var components = MonsterFactory.GenerateComponents(state, Affiliation.Friendly);
            var actor = GetNewEntity();

            AddComponentsToEntity(actor, components.ToArray());
            AddComponentsToEntity(actor,
                new TileLocation() { TilePosition = TilePositionFromActor(actor, map), ZLayer = 10 },
                new SpriteWrap(),
                TurnOrderCard.For(actor.GetComponent<ProfileDetails>()));
        }

        /*
        var actor = FindNode(\"Vaporeon\") as Entity;
        RegisterExistingEntity(actor);
        AddComponentsToEntity(actor, 
            new ProfileDetails() { Name = \"Vaporeon\", MonNumber = 134, Affiliation = Affiliation.Friendly },
            new TileLocation() { TilePosition = TilePositionFromActor(actor, map), ZLayer = 10 }, 
            new SpriteWrap(), 
            new Selectable(), 
            new PlayerCharacter(), 
            new Health() { Current = 30, Max = 30 }, 
            new Movable() { MaxMove = 4, MaxJump = 2, TerrainCostModifiers = amphibiousMoveType, TravelSpeed = 3 }, 
            new TurnSpeed() { TimeToAct = 12 },
            new FightStats() { Atn = 5, Dex = 7, Mag = 8, Str = 6, Tuf = 9 },
            new Elemental() { Element = Element.Water },
            new StatusBag(),
            new SkillSet() { Skills = skillList });
        AddComponentToEntity(actor, TurnOrderCard.For(actor.GetComponent<ProfileDetails>()));

        actor = FindNode(\"Scyther\") as Entity;
        RegisterExistingEntity(actor);
        AddComponentsToEntity(actor,
            new ProfileDetails() { Name = \"Scyther\", MonNumber = 123, Affiliation = Affiliation.Friendly },
            new TileLocation() { TilePosition = TilePositionFromActor(actor, map), ZLayer = 10 }, 
            new SpriteWrap(), 
            new Selectable(), 
            new PlayerCharacter(), 
            new Health() { Current = 10, Max = 30 }, 
            new Movable() { MaxMove = 4, MaxJump = 2, TravelSpeed = 2 }, 
            new TurnSpeed() { TimeToAct = 16 },
            new FightStats() { Atn = 5, Dex = 17, Mag = 8, Str = 6, Tuf = 9 },
            new Elemental() { Element = Element.Earth },
            new StatusBag(),
            new SkillSet() { Skills = skillList });
        AddComponentToEntity(actor, TurnOrderCard.For(actor.GetComponent<ProfileDetails>()));

        actor = FindNode(\"Zapdos\") as Entity;
        RegisterExistingEntity(actor);
        AddComponentsToEntity(actor,
            new ProfileDetails() { Name = \"Zapdos\", MonNumber = 145, Affiliation = Affiliation.Enemy },
            new Pulse() { squishAmountY = 0.03f, squishSpeed = 2 }, 
            new TileLocation() { TilePosition = TilePositionFromActor(actor, map), ZLayer = 5 }, 
            new SpriteWrap(), 
            new Selectable(),
            new EnemyNpc(),
            new Health() { Current = 24, Max = 30 }, 
            new Movable() { MaxMove = 2, MaxJump = 1, TerrainCostModifiers = flyingMoveType, TravelSpeed = 2 }, 
            new TurnSpeed() { TimeToAct = 14 },
            new StatusBag(),
            new FightStats() { Atn = 5, Dex = 7, Mag = 8, Str = 6, Tuf = 9 },
            new Elemental() { Element = Element.Fire },
            new SkillSet() { Skills = skillList });
        AddComponentToEntity(actor, TurnOrderCard.For(actor.GetComponent<ProfileDetails>()));

        actor = FindNode(\"Machamp\") as Entity;
        RegisterExistingEntity(actor);
        AddComponentsToEntity(actor,
            new ProfileDetails() { Name = \"Machamp\", MonNumber = 68, Affiliation = Affiliation.Enemy },
            new TileLocation() { TilePosition = TilePositionFromActor(actor, map), ZLayer = 5 }, 
            new SpriteWrap(), 
            new Selectable(), 
            new EnemyNpc(), 
            new Health() { Current = 30, Max = 30 }, 
            new Movable() { MaxMove = 4, MaxJump = 2, TravelSpeed = 4 }, 
            new TurnSpeed() { TimeToAct = 26 },
            new StatusBag(),
            new FightStats() { Atn = 5, Dex = 7, Mag = 8, Str = 6, Tuf = 9 },
            new Elemental() { Element = Element.Neutral },
            new SkillSet() { Skills = skillList });
        AddComponentToEntity(actor, TurnOrderCard.For(actor.GetComponent<ProfileDetails>()));

        actor = FindNode(\"Rock\") as Entity;
        RegisterExistingEntity(actor);
        AddComponentsToEntity(actor, 
            new TileLocation() { TilePosition = TilePositionFromActor(actor, map), ZLayer = 3 }, 
            new SpriteWrap(), 
            new Obstacle(), 
            new Selectable(), 
            new Health() { Current = 30, Max = 30 },
            new FightStats() { Atn = 5, Dex = 7, Mag = 8, Str = 6, Tuf = 99 });
        */
    }

    public override void PerformHudAction(string actionName, params object[] args)
    {
        switch (actionName)
        {
            case \"SetProfile\":
                var side = (Direction)args[0];
                var profileEntity = args[1] as Entity;
                if (side == Direction.Left)
                {
                    leftProfileCard.SetProfile(profileEntity);
                }
                else if (side == Direction.Right)
                {
                    rightProfileCard.SetProfile(profileEntity);
                }
                break;
            case \"SetActionMenuDisplayed\":
                if ((bool)args[0])
                {
                    leftProfileCard.MakeRoomForActionMenu();
                }
                else
                {
                    leftProfileCard.TakeAwayRoomForActionMenu();
                }
                break;
            case \"SetActions\":
                actionMenu.RegisterSkillSet(args[0] as SkillSet, (bool)args[1]);
                break;
            case \"SetTargetingInfo\":
                rightProfileCard.TargetingInfo = args[0] as string;
                break;
            case \"UpdateStatusEffects\":
                {
                    var entity = args[0] as Entity;
                    if (leftProfileCard.MatchesCurrentEntity(entity))
                    {
                        leftProfileCard.SetStatusEffects(entity.GetComponent<StatusBag>());
                    }
                    else if (rightProfileCard.MatchesCurrentEntity(entity))
                    {
                        rightProfileCard.SetStatusEffects(entity.GetComponent<StatusBag>());
                    }
                }
                break;
            case \"FlashMove\":
                leftProfileCard.FlashMove((int)args[0]);
                break;
            default:
                throw new ArgumentException($\"Attempting to perform an illegal HUD action: {actionName}\");
        }
    }
}
"

[sub_resource type="Animation" id=2]
length = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath(".:margin_top")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 324.0, 374.231 ]
}

[sub_resource type="Animation" id=3]
length = 0.2
tracks/0/type = "value"
tracks/0/path = NodePath(".:margin_left")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ -92.1327, 2.86728 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:margin_right")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 323.0, 418.867 ]
}
tracks/3/type = "value"
tracks/3/path = NodePath(".:margin_top")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 374.231, 374.231 ]
}

[sub_resource type="Animation" id=4]
length = 0.2
tracks/0/type = "value"
tracks/0/path = NodePath(".:margin_left")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 2.86728, -92.1327 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:margin_right")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 418.867, 323.0 ]
}

[sub_resource type="Animation" id=5]
length = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath(".:margin_top")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 374.231, 324.0 ]
}

[sub_resource type="Animation" id=6]
length = 0.2
tracks/0/type = "value"
tracks/0/path = NodePath(".:margin_left")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 594.0, 504.405 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:margin_right")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 1010.0, 920.405 ]
}

[sub_resource type="Animation" id=7]
length = 0.2
tracks/0/type = "value"
tracks/0/path = NodePath(".:margin_left")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 504.405, 594.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:margin_right")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 920.405, 1010.0 ]
}

[node name="Combat" type="Node2D"]
script = SubResource( 1 )

[node name="Camera" type="Node2D" parent="."]
script = ExtResource( 8 )

[node name="Camera2D" type="Camera2D" parent="Camera"]
position = Vector2( -120, -90 )
anchor_mode = 0
current = true

[node name="Map" type="Node2D" parent="."]
script = ExtResource( 8 )

[node name="TileMap" type="TileMap" parent="Map"]
mode = 1
tile_set = ExtResource( 2 )
cell_size = Vector2( 96, 48 )
cell_quadrant_size = 48
centered_textures = true
format = 1
tile_data = PoolIntArray( -327676, 13, 0, -327675, 13, 0, -327674, 11, 0, -327673, 11, 0, -327672, 6, 0, -327671, 3, 0, -327670, 3, 0, -327669, 5, 0, -327668, 3, 0, -262140, 13, 0, -262139, 13, 0, -262138, 11, 0, -262137, 11, 0, -262136, 6, 0, -262135, 3, 0, -262134, 3, 0, -262133, 3, 0, -262132, 2, 0, -196604, 13, 0, -196603, 13, 0, -196602, 11, 0, -196601, 11, 0, -196600, 6, 0, -196599, 5, 0, -196598, 3, 0, -196597, 2, 0, -196596, 1, 0, -131068, 13, 0, -131067, 13, 0, -131066, 11, 0, -131065, 11, 0, -131064, 6, 0, -131063, 3, 0, -131062, 3, 0, -131061, 2, 0, -131060, 0, 0, -65532, 9, 0, -65531, 9, 0, -65530, 9, 0, -65529, 7, 0, -65528, 18, 0, -65527, 3, 0, -65526, 3, 0, -65525, 3, 0, -65524, 0, 0, 4, 9, 0, 5, 9, 0, 6, 9, 0, 7, 7, 0, 8, 18, 0, 9, 19, 0, 10, 19, 0, 11, 19, 0, 12, 19, 0, 65540, 9, 0, 65541, 9, 0, 65542, 9, 0, 65543, 8, 0, 65544, 18, 0, 65545, 3, 0, 65546, 3, 0, 65547, 2, 0, 65548, 0, 0, 131076, 13, 0, 131077, 13, 0, 131078, 11, 0, 131079, 11, 0, 131080, 6, 0, 131081, 3, 0, 131082, 3, 0, 131083, 3, 0, 131084, 0, 0, 196612, 13, 0, 196613, 13, 0, 196614, 11, 0, 196615, 11, 0, 196616, 6, 0, 196617, 3, 0, 196618, 3, 0, 196619, 5, 0, 196620, 2, 0, 262148, 13, 0, 262149, 13, 0, 262150, 11, 0, 262151, 11, 0, 262152, 6, 0, 262153, 5, 0, 262154, 3, 0, 262155, 3, 0, 262156, 2, 0, 327684, 13, 0, 327685, 13, 0, 327686, 11, 0, 327687, 11, 0, 327688, 6, 0, 327689, 3, 0, 327690, 3, 0, 327691, 3, 0, 327692, 3, 0 )

[node name="TileMap2" type="TileMap" parent="Map"]
position = Vector2( 0, -24 )
mode = 1
tile_set = ExtResource( 2 )
cell_size = Vector2( 96, 48 )
cell_quadrant_size = 48
centered_textures = true
format = 1
tile_data = PoolIntArray( -65532, 9, 0, -65531, 9, 0, -65530, 7, 0, 4, 9, 0, 5, 9, 0, 6, 7, 0, 65540, 9, 0, 65541, 9, 0, 65542, 7, 0 )

[node name="TileMap3" type="TileMap" parent="Map"]
position = Vector2( 0, -48 )
mode = 1
tile_set = ExtResource( 2 )
cell_size = Vector2( 96, 48 )
cell_quadrant_size = 48
centered_textures = true
format = 1
tile_data = PoolIntArray( -65532, 9, 0, -65531, 7, 0, 4, 9, 0, 5, 7, 0, 65540, 9, 0, 65541, 7, 0 )

[node name="TileMap4" type="TileMap" parent="Map"]
position = Vector2( 0, -72 )
mode = 1
tile_set = ExtResource( 2 )
cell_size = Vector2( 96, 48 )
cell_quadrant_size = 48
centered_textures = true
format = 1
tile_data = PoolIntArray( -65532, 7, 0, 4, 8, 0, 65540, 7, 0 )

[node name="Actors" type="Node2D" parent="."]

[node name="Rock" type="Node2D" parent="Actors"]
position = Vector2( 337.969, 288.174 )
script = ExtResource( 8 )
__meta__ = {
"_edit_group_": true
}

[node name="Sprite" type="Sprite" parent="Actors/Rock"]
position = Vector2( 0, -24 )
texture = ExtResource( 9 )

[node name="Vaporeon" type="Node2D" parent="Actors"]
position = Vector2( 139.849, 289.233 )
script = ExtResource( 8 )
__meta__ = {
"_edit_group_": true
}

[node name="134" type="Sprite" parent="Actors/Vaporeon"]
position = Vector2( 0, -18 )
texture = ExtResource( 6 )

[node name="Scyther" type="Node2D" parent="Actors"]
position = Vector2( 527.613, 286.055 )
script = ExtResource( 8 )
__meta__ = {
"_edit_group_": true
}

[node name="123" type="Sprite" parent="Actors/Scyther"]
position = Vector2( 0, -23 )
texture = ExtResource( 4 )

[node name="Zapdos" type="Node2D" parent="Actors"]
position = Vector2( 240.498, 93.2327 )
script = ExtResource( 8 )
__meta__ = {
"_edit_group_": true
}

[node name="145" type="Sprite" parent="Actors/Zapdos"]
position = Vector2( 0, -40 )
rotation = 3.14159
scale = Vector2( 1, -1 )
texture = ExtResource( 3 )

[node name="Machamp" type="Node2D" parent="Actors"]
position = Vector2( 384.585, 218.249 )
script = ExtResource( 8 )
__meta__ = {
"_edit_group_": true
}

[node name="68" type="Sprite" parent="Actors/Machamp"]
position = Vector2( 0, -29 )
rotation = 3.14159
scale = Vector2( 1, -1 )
texture = ExtResource( 5 )

[node name="Target" type="Node2D" parent="Actors"]
position = Vector2( 525.494, 191.763 )
script = ExtResource( 8 )
__meta__ = {
"_edit_group_": true
}

[node name="Sprite" type="Sprite" parent="Actors/Target"]
texture = ExtResource( 7 )

[node name="HUD" type="CanvasLayer" parent="."]

[node name="LeftProfile" parent="HUD" instance=ExtResource( 10 )]
modulate = Color( 1, 1, 1, 0 )
margin_left = -92.1327
margin_top = 323.0
margin_right = 323.0
margin_bottom = 599.231

[node name="AnimationPlayer" type="AnimationPlayer" parent="HUD/LeftProfile"]
anims/SlideDown = SubResource( 2 )
anims/SlideIn = SubResource( 3 )
anims/SlideOut = SubResource( 4 )
anims/SlideUp = SubResource( 5 )

[node name="ActionMenu" parent="HUD/LeftProfile" instance=ExtResource( 12 )]
margin_left = 0.0
margin_top = 54.0
margin_right = 511.0
margin_bottom = 280.0

[node name="RightProfile" parent="HUD" instance=ExtResource( 11 )]
modulate = Color( 1, 1, 1, 0 )
margin_left = 594.0
margin_top = 375.484
margin_right = 1010.0
margin_bottom = 601.484

[node name="AnimationPlayer" type="AnimationPlayer" parent="HUD/RightProfile"]
anims/SlideIn = SubResource( 6 )
anims/SlideOut = SubResource( 7 )

[node name="TerrainInfoPrefab" parent="HUD" instance=ExtResource( 13 )]
visible = false
margin_left = 6.49255
margin_top = 7.0441
margin_right = 6.49255
margin_bottom = 7.0441

[node name="WinScreen" parent="." instance=ExtResource( 1 )]
